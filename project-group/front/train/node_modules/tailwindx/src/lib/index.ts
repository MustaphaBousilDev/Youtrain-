// Object.prototype.toString.call(someObject) === "[object Object]"
class TailwindXHelper {
  private _data: Array<string> = [];

  protected get _dataArr(): Array<string> {
    return this._removeDoubleButLastClassName(this._data);
  }

  protected _processArgs(args: Array<any> = []): void {
    if (args.length) {
      for (let i = 0; i < args.length; i++) {
        const arg = args[i],
          argType = Object.prototype.toString.call(arg);
        //console.log("TYPE", argType);
        if (argType === "[object String]") {
          this._processString(arg);
        } else if (argType === "[object Array]") {
          this._processArray(arg);
        } else if (argType === "[object Object]") {
          this._processObject(arg);
        }
      }
    }
  }

  private _processString(str: string = ""): void {
    const split = str
      .split(" ")
      .map((str) => str.trim())
      .filter((str) => str !== "");
    if (split.length) {
      const formatted = this._removeDoubleButLastClassName(split);
      this._data = this._removeDoubleButLastClassName([
        ...this._data,
        ...formatted,
      ]);
    }
  }

  private _processArray(arr: Array<string> = []): void {
    if (arr.length) {
      this._processArgs(arr);
    }
  }

  private _processObject(obj: any = {}): void {
    const keys = Object.keys(obj);
    if (keys.length) {
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const value = obj[key];
        if (Object.prototype.toString.call(value) === "[object Boolean]") {
          if (value) {
            this._processString(key);
          }
        } else {
          this._processArgs([value]);
        }
      }
    }
  }

  private _removeDoubleButLastClassName(arr: Array<string>): Array<string> {
    let newClassNames = [];

    if (arr.length === 1) {
      return [...arr];
    }

    const duplicates = this._getDuplicatesOfArray(arr);

    if (duplicates.length) {
      duplicates.forEach((dupStr: string) => {
        const lastIndex = arr.lastIndexOf(dupStr);
        newClassNames = [
          ...newClassNames,
          ...arr.filter((str: string, index: number) =>
            str !== dupStr || lastIndex === index ? true : false
          ),
        ];
      });
    } else {
      newClassNames = [...newClassNames, ...arr];
    }

    return [...newClassNames];
  }

  private _getDuplicatesOfArray(arr: Array<string>): Array<string> {
    let dups: Array<string> = [];

    if (arr.length) {
      const _data = {};
      arr.forEach((str) => {
        if (typeof _data[str] === "number") {
          _data[str]++;
        } else {
          _data[str] = 1;
        }
      });
      const duplicates = Object.keys(_data).reduce((acc, curr) => {
        if (_data[curr] > 1) {
          return [...acc, curr];
        }
        return [...acc];
      }, []);

      dups = [...dups, ...duplicates];
    }
    return dups;
  }
}

class TailwindX extends TailwindXHelper {
  constructor(args: Array<any> = []) {
    super();
    this._processArgs(args);
  }

  public get toStr() {
    return this._dataArr.join(" ").trim();
  }
}

export const twx = (...args: Array<any>): string => {
  const instance = new TailwindX(args || []);
  return instance.toStr;
};
