"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.twx = void 0;
// Object.prototype.toString.call(someObject) === "[object Object]"
class TailwindXHelper {
    constructor() {
        this._data = [];
    }
    get _dataArr() {
        return this._removeDoubleButLastClassName(this._data);
    }
    _processArgs(args = []) {
        if (args.length) {
            for (let i = 0; i < args.length; i++) {
                const arg = args[i], argType = Object.prototype.toString.call(arg);
                //console.log("TYPE", argType);
                if (argType === "[object String]") {
                    this._processString(arg);
                }
                else if (argType === "[object Array]") {
                    this._processArray(arg);
                }
                else if (argType === "[object Object]") {
                    this._processObject(arg);
                }
            }
        }
    }
    _processString(str = "") {
        const split = str
            .split(" ")
            .map((str) => str.trim())
            .filter((str) => str !== "");
        if (split.length) {
            const formatted = this._removeDoubleButLastClassName(split);
            this._data = this._removeDoubleButLastClassName([
                ...this._data,
                ...formatted,
            ]);
        }
    }
    _processArray(arr = []) {
        if (arr.length) {
            this._processArgs(arr);
        }
    }
    _processObject(obj = {}) {
        const keys = Object.keys(obj);
        if (keys.length) {
            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                const value = obj[key];
                if (Object.prototype.toString.call(value) === "[object Boolean]") {
                    if (value) {
                        this._processString(key);
                    }
                }
                else {
                    this._processArgs([value]);
                }
            }
        }
    }
    _removeDoubleButLastClassName(arr) {
        let newClassNames = [];
        if (arr.length === 1) {
            return [...arr];
        }
        const duplicates = this._getDuplicatesOfArray(arr);
        if (duplicates.length) {
            duplicates.forEach((dupStr) => {
                const lastIndex = arr.lastIndexOf(dupStr);
                newClassNames = [
                    ...newClassNames,
                    ...arr.filter((str, index) => str !== dupStr || lastIndex === index ? true : false),
                ];
            });
        }
        else {
            newClassNames = [...newClassNames, ...arr];
        }
        return [...newClassNames];
    }
    _getDuplicatesOfArray(arr) {
        let dups = [];
        if (arr.length) {
            const _data = {};
            arr.forEach((str) => {
                if (typeof _data[str] === "number") {
                    _data[str]++;
                }
                else {
                    _data[str] = 1;
                }
            });
            const duplicates = Object.keys(_data).reduce((acc, curr) => {
                if (_data[curr] > 1) {
                    return [...acc, curr];
                }
                return [...acc];
            }, []);
            dups = [...dups, ...duplicates];
        }
        return dups;
    }
}
class TailwindX extends TailwindXHelper {
    constructor(args = []) {
        super();
        this._processArgs(args);
    }
    get toStr() {
        return this._dataArr.join(" ").trim();
    }
}
exports.twx = (...args) => {
    const instance = new TailwindX(args || []);
    return instance.toStr;
};
//# sourceMappingURL=index.js.map